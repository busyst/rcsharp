[FunctionCreation { name: "main", return_type: Void, arguments: [], body: [VariableDeclaration { name: "q", _type: Type("u16"), expression: [(Number { number_as_string: "128" }, (17, 1))] }, VariableDeclaration { name: "x", _type: ArrayStack(Type("u8"), 8), expression: [] }, VariableDeclaration { name: "e", _type: Type("u16"), expression: [(Number { number_as_string: "16" }, (17, 3))] }, Operation { operation: [(Name { name_string: "x" }, (4, 4)), (LSQBrace, (5, 4)), (Number { number_as_string: "0" }, (6, 4)), (RSQBrace, (7, 4)), (Equal, (9, 4)), (Number { number_as_string: "1" }, (11, 4))] }, Operation { operation: [(Name { name_string: "x" }, (4, 5)), (LSQBrace, (5, 5)), (Number { number_as_string: "1" }, (6, 5)), (RSQBrace, (7, 5)), (Equal, (9, 5)), (Number { number_as_string: "2" }, (11, 5))] }, Operation { operation: [(Name { name_string: "x" }, (4, 6)), (LSQBrace, (5, 6)), (Number { number_as_string: "2" }, (6, 6)), (RSQBrace, (7, 6)), (Equal, (9, 6)), (Number { number_as_string: "3" }, (11, 6))] }, Operation { operation: [(Name { name_string: "x" }, (4, 7)), (LSQBrace, (5, 7)), (Number { number_as_string: "3" }, (6, 7)), (RSQBrace, (7, 7)), (Equal, (9, 7)), (Number { number_as_string: "4" }, (11, 7))] }, Operation { operation: [(Name { name_string: "x" }, (4, 8)), (LSQBrace, (5, 8)), (Number { number_as_string: "4" }, (6, 8)), (RSQBrace, (7, 8)), (Equal, (9, 8)), (Number { number_as_string: "5" }, (11, 8))] }, Operation { operation: [(Name { name_string: "x" }, (4, 9)), (LSQBrace, (5, 9)), (Number { number_as_string: "5" }, (6, 9)), (RSQBrace, (7, 9)), (Equal, (9, 9)), (Number { number_as_string: "6" }, (11, 9))] }, Operation { operation: [(Name { name_string: "x" }, (4, 10)), (LSQBrace, (5, 10)), (Number { number_as_string: "6" }, (6, 10)), (RSQBrace, (7, 10)), (Equal, (9, 10)), (Number { number_as_string: "7" }, (11, 10))] }, Operation { operation: [(Name { name_string: "x" }, (4, 11)), (LSQBrace, (5, 11)), (Number { number_as_string: "7" }, (6, 11)), (RSQBrace, (7, 11)), (Equal, (9, 11)), (Number { number_as_string: "8" }, (11, 11))] }, VariableDeclaration { name: "i", _type: Type("u16"), expression: [(Number { number_as_string: "0" }, (17, 12))] }, Loop { body: [IfElse { condition: [(Name { name_string: "i" }, (11, 14)), (COMPEqual, (13, 14)), (Number { number_as_string: "8" }, (16, 14))], if_body: [Break], else_body: None }, FunctionCall { name: "print_num", arguments: [(LParen, (17, 17)), (Name { name_string: "x" }, (18, 17)), (LSQBrace, (19, 17)), (Name { name_string: "i" }, (20, 17)), (RSQBrace, (21, 17)), (RParen, (22, 17))] }, Operation { operation: [(Name { name_string: "i" }, (8, 18)), (ADDEqual, (10, 18)), (Number { number_as_string: "1" }, (13, 18))] }] }, FunctionCall { name: "print_num", arguments: [(LParen, (13, 20)), (Name { name_string: "q" }, (14, 20)), (RParen, (15, 20))] }, FunctionCall { name: "print_num", arguments: [(LParen, (13, 21)), (Name { name_string: "e" }, (14, 21)), (RParen, (15, 21))] }] }, FunctionCreation { name: "factorial", return_type: Type("u16"), arguments: [("n", Type("u16"))], body: [IfElse { condition: [(Name { name_string: "n" }, (7, 29)), (COMPEqualLess, (9, 29)), (Number { number_as_string: "1" }, (12, 29))], if_body: [Return { expression: [(Number { number_as_string: "1" }, (15, 30))] }], else_body: Some([Return { expression: [(Name { name_string: "n" }, (15, 32)), (MUL, (17, 32)), (Name { name_string: "factorial" }, (19, 32)), (LParen, (28, 32)), (Name { name_string: "n" }, (29, 32)), (SUB, (31, 32)), (Number { number_as_string: "1" }, (33, 32)), (RParen, (34, 32))] }]) }] }, FunctionCreation { name: "print_num_u16", return_type: Void, arguments: [("n", Type("u16"))], body: [FunctionCall { name: "print_num", arguments: [(LParen, (13, 36)), (Name { name_string: "n" }, (14, 36)), (ShiftR, (16, 36)), (Number { number_as_string: "8" }, (19, 36)), (RParen, (20, 36))] }, FunctionCall { name: "print_num", arguments: [(LParen, (13, 37)), (Name { name_string: "n" }, (14, 37)), (RParen, (15, 37))] }, FunctionCall { name: "print_char", arguments: [(LParen, (14, 38)), (Number { number_as_string: "10" }, (15, 38)), (RParen, (17, 38))] }, FunctionCall { name: "print_char", arguments: [(LParen, (14, 39)), (Number { number_as_string: "13" }, (15, 39)), (RParen, (17, 39))] }] }, FunctionCreation { name: "print_num", return_type: Void, arguments: [("n", Type("u8"))], body: [MacroCall { name: "asm", arguments: [(String { string_content: "mov al, {n}" }, (20, 45)), (String { string_content: "shr al, 4" }, (18, 46)), (String { string_content: "add al, 48" }, (19, 47)), (String { string_content: "cmp al, 58" }, (19, 49)), (String { string_content: "jb I_L0" }, (16, 50)), (String { string_content: "add al, 7" }, (18, 51)), (String { string_content: "I_L0:" }, (14, 52)), (String { string_content: "mov ah, 0x0e" }, (21, 53)), (String { string_content: "int 0x10" }, (17, 54)), (String { string_content: "mov al, {n}" }, (20, 56)), (String { string_content: "and al, 0x0F" }, (21, 57)), (String { string_content: "add al, 48" }, (19, 58)), (String { string_content: "cmp al, 58" }, (19, 60)), (String { string_content: "jb I_L1" }, (16, 61)), (String { string_content: "add al, 7" }, (18, 62)), (String { string_content: "I_L1:" }, (14, 63)), (String { string_content: "mov ah, 0x0e" }, (21, 64)), (String { string_content: "int 0x10" }, (17, 65))] }] }, FunctionCreation { name: "print_char", return_type: Void, arguments: [("n", Type("u8"))], body: [MacroCall { name: "asm", arguments: [(String { string_content: "mov al, {n}" }, (20, 70)), (String { string_content: "mov ah, 0x0e" }, (21, 71)), (String { string_content: "int 0x10" }, (17, 72))] }] }] FunctionCreation { name: "sum", return_type: Type("u16"), arguments: [("n", Type("u16"))], body: [IfElse { condition: [(Name { name_string: "n" }, (7, 77)), (COMPEqualLess, (9, 77)), (Number { number_as_string: "0" }, (12, 77))], if_body: [Return { expression: [(Number { number_as_string: "0" }, (15, 78))] }], else_body: Some([Return { expression: [(Name { name_string: "n" }, (15, 80)), (ADD, (17, 80)), (Name { name_string: "sum" }, (19, 80)), (LParen, (22, 80)), (Name { name_string: "n" }, (23, 80)), (SUB, (25, 80)), (Number { number_as_string: "1" }, (27, 80)), (RParen, (28, 80))] }]) }] }]