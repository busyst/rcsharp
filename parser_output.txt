[FunctionCreation { name: "factorial", return_type: Type("u16"), arguments: [("n", Type("u16"))], body: [IfElse { condition: [(Name { name_string: "n" }, (7, 1)), (COMPEqualLess, (9, 1)), (Number { number_as_string: "1" }, (12, 1))], if_body: [Return { expression: [(Number { number_as_string: "1" }, (15, 2))] }], else_body: Some([Return { expression: [(Name { name_string: "n" }, (15, 4)), (MUL, (17, 4)), (Name { name_string: "factorial" }, (19, 4)), (LParen, (28, 4)), (Name { name_string: "n" }, (29, 4)), (SUB, (31, 4)), (Number { number_as_string: "1" }, (33, 4)), (RParen, (34, 4))] }]) }] }, FunctionCreation { name: "main", return_type: Void, arguments: [], body: [VariableDeclaration { name: "x", _type: Type("u16"), expression: [(Name { name_string: "factorial" }, (17, 10)), (LParen, (26, 10)), (Number { number_as_string: "6" }, (27, 10)), (RParen, (28, 10))] }, Operation { operation: [(Name { name_string: "x" }, (4, 11)), (Equal, (6, 11)), (Number { number_as_string: "2" }, (8, 11))] }, Operation { operation: [(Name { name_string: "x" }, (4, 12)), (ADDEqual, (6, 12)), (Number { number_as_string: "3" }, (9, 12))] }, FunctionCall { name: "print_num", arguments: [(LParen, (13, 13)), (Name { name_string: "x" }, (14, 13)), (RParen, (15, 13))] }, Loop { body: [FunctionCall { name: "print_num", arguments: [(LParen, (17, 15)), (Name { name_string: "x" }, (18, 15)), (RParen, (19, 15))] }] }] }, FunctionCreation { name: "print_num", return_type: Void, arguments: [("n", Type("u8"))], body: [MacroCall { name: "asm", arguments: [(String { string_content: "\r\n        mov al, {n}\r\n        shr al, 4\r\n        add al, 48\r\n\r\n        cmp al, 58\r\n        jb I_L0\r\n        add al, 7\r\n        I_L0:\r\n        mov ah, 0x0e\r\n        int 0x10\r\n\r\n        mov al, {n}\r\n        and al, 0x0F\r\n        add al, 48\r\n\r\n        cmp al, 58\r\n        jb I_L1\r\n        add al, 7\r\n        I_L1:\r\n        mov ah, 0x0e\r\n        int 0x10\r\n    " }, (367, 20))] }] }, FunctionCreation { name: "print_char", return_type: Void, arguments: [("n", Type("u8"))], body: [MacroCall { name: "asm", arguments: [(String { string_content: "\r\n        mov al, {n}\r\n        mov ah, 0x0e\r\n        int 0x10\r\n    " }, (77, 23))] }] }, FunctionCreation { name: "sum", return_type: Type("u16"), arguments: [("n", Type("u16"))], body: [IfElse { condition: [(Name { name_string: "n" }, (7, 27)), (COMPEqualLess, (9, 27)), (Number { number_as_string: "0" }, (12, 27))], if_body: [Return { expression: [(Number { number_as_string: "0" }, (15, 28))] }], else_body: Some([Return { expression: [(Name { name_string: "n" }, (15, 30)), (ADD, (17, 30)), (Name { name_string: "sum" }, (19, 30)), (LParen, (22, 30)), (Name { name_string: "n" }, (23, 30)), (SUB, (25, 30)), (Number { number_as_string: "1" }, (27, 30)), (RParen, (28, 30))] }]) }] }]30)), (LParen, (22, 30)), (Name { name_string: "n" }, (23, 30)), (SUB, (25, 30)), (Number { number_as_string: "1" }, (27, 30)), (RParen, (28, 30))] }]) }] }]ber { number_as_string: "1" }, (27, 30)), (RParen, (28, 30))] }]) }] }]e { name_string: "n" }, (29, 32)), (SUB, (31, 32)), (Number { number_as_string: "1" }, (33, 32)), (RParen, (34, 32))] }]) }] }]