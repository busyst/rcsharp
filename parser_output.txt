[FunctionCreation { name: "main", return_type: Void, arguments: [], body: [VariableDeclaration { name: "x", _type: Type("u16"), expression: [Operation { operation: [(Number { number_as_string: "1" }, (17, 1))] }] }, Loop { body: [Operation { operation: [(Name { name_string: "x" }, (8, 3)), (ADDEqual, (10, 3)), (Number { number_as_string: "1" }, (13, 3))] }, FunctionCall { name: "was_dead", arguments: [(Name { name_string: "x" }, (17, 4))] }, IfElse { condition: [(Name { name_string: "x" }, (11, 5)), (COMPEqual, (13, 5)), (Number { number_as_string: "2" }, (16, 5))], if_body: [Break], else_body: None }] }] }, FunctionCreation { name: "was_dead", return_type: Type("u16"), arguments: [("x", Type("u16"))], body: [IfElse { condition: [(Name { name_string: "x" }, (7, 12)), (COMPEqual, (9, 12)), (Number { number_as_string: "2" }, (12, 12))], if_body: [Return { value: [(Name { name_string: "x" }, (15, 13)), (ADD, (17, 13)), (Number { number_as_string: "2" }, (19, 13))] }], else_body: Some([Return { value: [(Name { name_string: "x" }, (15, 15)), (SUB, (17, 15)), (Number { number_as_string: "2" }, (19, 15))] }]) }, Return { value: [(Name { name_string: "x" }, (11, 17))] }] }] { number_as_string: "2" }, (19, 16))] }], else_body: Some([Return { value: [(Name { name_string: "x" }, (15, 18)), (SUB, (17, 18)), (Number { number_as_string: "2" }, (19, 18))] }]) }, Return { value: [(Name { name_string: "x" }, (11, 20))] }] }]16)), (Number { number_as_string: "2" }, (19, 16))] }, Operation { operation: [(RBrace, (4, 17)), (ElseKeyword, (5, 17)), (LBrace, (9, 17)), (ReturnKeyword, (8, 18)), (Name { name_string: "x" }, (15, 18)), (SUB, (17, 18)), (Number { number_as_string: "2" }, (19, 18))] }, Operation { operation: [(RBrace, (4, 19)), (ReturnKeyword, (4, 20)), (Name { name_string: "x" }, (11, 20))] }] }]