[FunctionCreation { name: "main", return_type: Void, arguments: [], body: [VariableDeclaration { name: "x", _type: Type("u16"), expression: [(Name { name_string: "factorial" }, (17, 1)), (LParen, (26, 1)), (Number { number_as_string: "3" }, (27, 1)), (RParen, (28, 1))] }, FunctionCall { name: "print_num", arguments: [(Name { name_string: "x" }, (14, 2))] }] }, FunctionCreation { name: "print_num", return_type: Void, arguments: [("n", Type("u8"))], body: [IfElse { condition: [(Name { name_string: "n" }, (7, 6)), (COMPLess, (9, 6)), (Number { number_as_string: "10" }, (11, 6))], if_body: [VariableDeclaration { name: "ch", _type: Type("u8"), expression: [(Name { name_string: "n" }, (21, 7)), (ADD, (23, 7)), (Number { number_as_string: "48" }, (25, 7))] }, FunctionCall { name: "print_char", arguments: [(Name { name_string: "ch" }, (19, 8))] }], else_body: Some([IfElse { condition: [(Name { name_string: "n" }, (13, 9)), (COMPLess, (15, 9)), (Number { number_as_string: "16" }, (17, 9))], if_body: [VariableDeclaration { name: "ch", _type: Type("u8"), expression: [(Name { name_string: "n" }, (21, 10)), (SUB, (23, 10)), (Number { number_as_string: "10" }, (25, 10)), (ADD, (28, 10)), (Number { number_as_string: "65" }, (30, 10))] }, FunctionCall { name: "print_char", arguments: [(Name { name_string: "ch" }, (19, 11))] }], else_body: None }]) }] }, FunctionCreation { name: "print_char", return_type: Void, arguments: [("n", Type("u8"))], body: [MacroCall { name: "asm", arguments: [(String { string_content: "\r\n        mov al, {n}\r\n        mov ah, 0x0e\r\n        int 0x10\r\n    " }, (77, 15))] }] }, FunctionCreation { name: "factorial", return_type: Type("u16"), arguments: [("n", Type("u16"))], body: [IfElse { condition: [(Name { name_string: "n" }, (7, 18)), (COMPEqual, (9, 18)), (Number { number_as_string: "0" }, (12, 18))], if_body: [Return { value: [(Number { number_as_string: "1" }, (15, 19))] }], else_body: Some([Return { value: [(Name { name_string: "n" }, (15, 21)), (MUL, (17, 21)), (Name { name_string: "factorial" }, (19, 21)), (LParen, (28, 21)), (Name { name_string: "n" }, (29, 21)), (SUB, (31, 21)), (Number { number_as_string: "1" }, (33, 21)), (RParen, (34, 21))] }]) }] }]