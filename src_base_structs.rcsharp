fn __chkstk() : void{ /*I dont get it, more research needed*/}

namespace process{
    #[DllImport("kernel32.dll")]
    fn ExitProcess(code:i32): void;
    
    #[DllImport("kernel32.dll")]
    fn GetModuleFileNameA(hModule: &i8, lpFilename: &i8, nSize: u32): u32;

    fn get_executable_path() : string::String {
        let string : string::String = string::with_size(260);
        let len : u32 = GetModuleFileNameA(0 as &i8, string.data, string.len as u32);
        string.len = len as i32;
        return string;
    }
    fn get_executable_env_path() : string::String {
        let string : string::String = get_executable_path();
        let index : u32 = string.len as u32 - 1;
        loop {
            if *(string.data + index as i64) == '\\' || index < 0 {
                break;
            }
            index = index - 1;
        }
        string.len = (index + 1) as i32;
        return string;
    }
    fn throw(exception: &i8) : void{
        let len: i32 = string_utils::c_str_len(exception);
        console::AllocConsole();
        let chars_written: i32;
        let stdout_handle: &i8 = console::GetStdHandle(-11 as i32);
        let e: &i8 = "Exception: ";
        console::WriteConsoleA(stdout_handle, e, string_utils::c_str_len(e), &chars_written, 0 as &i8);
        console::WriteConsoleA(stdout_handle, exception, len, &chars_written, 0 as &i8);
        let nl : i8 = 10;
        console::WriteConsoleA(stdout_handle, &nl, 1, &chars_written, 0 as &i8);
        ExitProcess(-1);
    }
}
namespace mem{
    #[DllImport("kernel32.dll")]
    fn GetProcessHeap(): &i32;
    #[DllImport("kernel32.dll")]
    fn HeapAlloc(hHeap: &i32, dwFlags: i32, dwBytes: i64): &i8;
    #[DllImport("kernel32.dll")]
    fn HeapFree(hHeap: &i32, dwFlags: i32, lpMem: &i8): i32;
    fn malloc(size:i64) : &i8{return HeapAlloc(GetProcessHeap(), 0 as i32, size);}
    fn free(ptr: &i8) : void {HeapFree(GetProcessHeap(), 0, ptr);}
    fn copy(src: &i8, dest:&i8, len: i64) {
        let i: i64 = 0;
        loop{
            if i >= len{
                break;
            }
            *(dest + i) = *(src + i);
            i = i + 1;
        }
    }
    fn zerofill(val: i8, dest:&i8, len: i64) {
        fill(0, dest, len);
    }
    fn fill(val: i8, dest:&i8, len: i64) {
        let i: i64 = 0;
        loop{
            if i >= len{
                break;
            }
            *(dest + i) = val;
            i = i + 1;
        }
    }
}
namespace list{
    // Linked list
    struct List{
        head: &ListNode,
        foot: &ListNode,
        length: u32,
    }
    // Linked list node
    struct ListNode{
        next_node: &ListNode,
        data: i32,
    }
    fn new(list: &List){
        list.head = 0 as &ListNode;
        list.foot = 0 as &ListNode;
        list.length = 0 as u32;
    }
    fn new_node(list: &ListNode){
        list.next_node = 0 as &ListNode;
        list.data = 0 as i32;
    }
    fn extend(list: &List, data: i32){
        let new_node: &ListNode = mem::malloc(sizeof(ListNode)) as &ListNode;
        
        new_node.next_node = 0 as &ListNode;
        new_node.data = data;

        if list.head == 0 as &ListNode {
            list.head = new_node;
            list.foot = new_node;
        } else {
            // Append to the end of the list.
            list.foot.next_node = new_node;
            list.foot = new_node;
        }
        list.length = list.length + 1 as u32;
    }
    fn walk(list: &List) : u32{
        let l : u32 = 0 as u32;
        let ptr : &ListNode = list.head;
        loop {
            if (ptr == 0 as &ListNode){
                break;
            }
            l = l + 1 as u32;
            ptr = ptr.next_node;
        }
        return l;
    }
    fn free(list: &List) {
        let current: &ListNode = list.head;
        loop {
            if (current == 0 as &ListNode) {
                break;
            }
            let next: &ListNode = current.next_node;
            mem::free(current as &i8); 
            current = next; 
        }
        list.head = 0 as &ListNode;
        list.foot = 0 as &ListNode;
        list.length = 0;
    }
}
namespace vector{
    // Dynamicly expanding array
    struct Vec{
        array: &i8,
        length: u32,
        capacity: u32,
    }
    #[ExtentionOf(Vec)]
    fn new(vec: &Vec){
        vec.array = 0 as &i8;
        vec.length = 0;
        vec.capacity = 0;
    }
    #[ExtentionOf(Vec)]
    fn push(vec: &Vec, data: i8){
        if vec.length >= vec.capacity {
            let new_capacity : u32 = 4;
            if vec.capacity != 0 as u32{
                new_capacity = vec.capacity * 2 as u32;
            }
            
            let new_array: &i8 = mem::malloc(sizeof(i8) * new_capacity as i64) as &i8;

            if vec.array != 0 as &i8 {
                let i : u32 = 0;
                loop{
                    if i >= vec.length {
                        break;
                    }
                    *(new_array + i as i64) = *(vec.array + i as i64);
                    i = i + 1 as u32;
                }
                mem::free(vec.array as &i8);
            }
            vec.array = new_array;
            vec.capacity = new_capacity;
        }
        *(vec.array + vec.length as i64) = data;
        vec.length = vec.length + 1 as u32;
    }
    #[ExtentionOf(Vec)]
    fn push_bulk(vec: &Vec, data: &i8, data_len: i32){
        let index : i32 = 0;
        loop{
            if index >= data_len{
                break;
            }
            push(vec,*(data + index as i64));
            index = index + 1;
        }
    }
    #[ExtentionOf(Vec)]
    fn free(vec: &Vec) {
        if vec.array != 0 as &i8 {
            mem::free(vec.array as &i8);
        }
        vec.array = 0 as &i8;
        vec.length = 0;
        vec.capacity = 0;
    }
}
namespace console{
    #[DllImport("kernel32.dll")]
    fn AllocConsole(): i32;

    #[DllImport("kernel32.dll")]
    fn GetStdHandle(nStdHandle: i32): &i8;
    
    #[DllImport("kernel32.dll")]
    fn FreeConsole(): i32;

    #[DllImport("kernel32.dll")]
    fn WriteConsoleA(
        hConsoleOutput: &i8,
        lpBuffer: &i8,
        nNumberOfCharsToWrite: i32,
        lpNumberOfCharsWritten: &i32,
        lpReserved: &i8
    ): i32;

    fn get_stdout() : &i8 {
        let stdout_handle: &i8 = GetStdHandle(-11 as i32);
        if (stdout_handle == -1 as &i8) {
            process::ExitProcess(-1 as i32);
        }
        return stdout_handle;
    }
    fn write(buffer: &i8, len: i32){
        let chars_written: i32;
        WriteConsoleA(get_stdout(), buffer, len, &chars_written, 0 as &i8);
        if len != chars_written{
            process::ExitProcess(-2);
        }
    }
    fn write_string(str: &string::String){
        let chars_written: i32;
        WriteConsoleA(get_stdout(), str.data, str.len, &chars_written, 0 as &i8);
        if str.len != chars_written{
            process::ExitProcess(-2);
        }
    }
    fn writeln(buffer: &i8, len: i32){
        if len == 0{
            return;
        }
        let chars_written: i32;
        WriteConsoleA(get_stdout(), buffer, len, &chars_written, 0 as &i8);
        if len != chars_written{
            process::ExitProcess(-2);
        }
        let nl : i8 = 10;
        WriteConsoleA(get_stdout(), &nl, 1, &chars_written, 0 as &i8);
    }
    fn print_char(n: i8) {
        let b : i8 = n;
        write(&b, 1);
    }
    fn println_i64(n: i64) {
        if n >= 0{
            println_u64(n as u64);
        }else{
            write("-", 1);
            println_u64(-n as u64);
        }
    }
    fn println_u64(n: u64) {
        let buffer: vector::Vec;
        vector::new(&buffer);
        if (n == 0) {
            vector::push(&buffer, 48 as i8);
            vector::push(&buffer, 10);
            write(buffer.array, buffer.length as i32);
            vector::free(&buffer);
            return;
        }

        let mut_n: u64 = n;

        loop {
            if (mut_n == 0) {
                break;
            }
            let digit_char: i8 = (mut_n % 10) as i8 + (48 as i8);
            vector::push(&buffer, digit_char);
            mut_n = mut_n / 10;
        }

        let i: u32 = 0;
        let j: u32 = buffer.length - 1;
        loop {
            if (i >= j) {
                break;
            }
            let temp: i8 = *(buffer.array + i as i64);
            *(buffer.array + i as i64) = *(buffer.array + j as i64);
            *(buffer.array + j as i64) = temp;

            i = i + 1;
            j = j - 1;
        }

        vector::push(&buffer, 10); 

        write(buffer.array, buffer.length as i32);
        vector::free(&buffer);
    }
}
namespace string{
    // Always malloc'd, always must be freed
    struct String{
        data: &i8,
        len: i32,
    }
    // USE ONLY WITH NULL TERMINATED STRINGS (from_c_string("...");)
    fn from_c_string(c_string: &i8) : String{
        let x: String;
        x.len = string_utils::c_str_len(c_string) as i32;
        x.data = mem::malloc(sizeof(i8) * x.len as i64) as &i8;
        mem::copy(c_string, x.data, x.len as i64);
        return x;
    }
    fn empty() : String{
        let x: String;
        x.data = 0 as &i8;
        x.len = 0;
        return x;
    }
    fn with_size(size: i32) : String{
        let x: String;
        x.len = size;
        x.data = mem::malloc(sizeof(i8) * size as i64);
        return x;
    }

    fn concat_with_c_string(src_string: &String, c_string: &i8) : String{
        let c_string_len : i32 = string_utils::c_str_len(c_string);
        let combined : &i8 = mem::malloc(sizeof(i8) * (c_string_len + src_string.len) as i64);
        mem::copy(src_string.data, combined, src_string.len as i64);
        mem::copy(c_string, (combined + src_string.len as i64), c_string_len as i64);
        let str: String;
        str.data = combined;
        str.len = c_string_len + src_string.len;
        return str;
    }
    fn equal(first: &String, second: &String) : bool{
        if first.len != second.len{
            return 0 as bool;
        }
        let iter: i32 = first.len - 1;
        loop{
            if iter < 0 {
                break;
            }
            if *(first.data + iter as i64) != *(second.data + iter as i64) {
                return 0 as bool;
            }
            iter = iter - 1;
        }
        return 1 as bool;
    }

    fn free(str: &String){
        mem::free(str.data);
        str.len = 0;
    }
}
namespace string_utils{
    fn insert(src1: &i8, src2: &i8, index: i32) : &i8{
        let len1 : i32 = c_str_len(src1);
        let len2 : i32 = c_str_len(src2);
        let output : &i8 = mem::malloc((len1 + len2 + 1) as i64);
        mem::copy(src1, output, index as i64);
        mem::copy(src2, (output + index as i64), len2 as i64);
        mem::copy((src1 + index as i64), (output + (index + len2) as i64), (len1 - index) as i64);
        *(output + (len1 + len2) as i64) = 0;
        return output;
    }
    fn c_str_len(str: &i8) : i32{
        let len : i32 = 0;
        loop{
            if *(str + len as i64) == 0{
                break;
            }
            len = len + 1;
        }
        return len;
    }
}

namespace fs{
    #[DllImport("kernel32.dll")]
    fn CreateFileA(
        lpFileName: &i8,
        dwDesiredAccess: u32,
        dwShareMode: u32,
        lpSecurityAttributes: &i8,
        dwCreationDisposition: u32,
        dwFlagsAndAttributes: u32,
        hTemplateFile: &i8
    ) : &i8; // Returns a HANDLE

    #[DllImport("kernel32.dll")]
    fn WriteFile(
        hFile: &i8,
        lpBuffer: &i8,
        nNumberOfBytesToWrite: u32,
        lpNumberOfBytesWritten: &u32,
        lpOverlapped: &i8
    ) : i32; // Returns a BOOL

    #[DllImport("kernel32.dll")]
    fn ReadFile(
        hFile: &i8,
        lpBuffer: &i8,
        nNumberOfBytesToRead: u32,
        lpNumberOfBytesRead: &u32,
        lpOverlapped: &i8
    ) : i32; // Returns a BOOL
    
    #[DllImport("kernel32.dll")]
    fn GetFileSizeEx(hFile: &i8, lpFileSize: &i64): i32; // Returns BOOL

    #[DllImport("kernel32.dll")]
    fn CloseHandle(hObject: &i8) : i32; // Returns a BOOL

    #[DllImport("kernel32.dll")]
    fn DeleteFileA(lpFileName: &i8) : i32; // Returns a BOOL

    fn write_to_file(path: &i8, content: &i8, content_len: u32) : i32 {
        let CREATE_ALWAYS: u32 = 2;
        let GENERIC_WRITE: u32 = 0x40000000;
        let FILE_ATTRIBUTE_NORMAL: u32 = 0x80;
        let hFile: &i8 = CreateFileA(path, GENERIC_WRITE, 0, 0 as &i8, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0 as &i8);
        let INVALID_HANDLE_VALUE: &i8 = -1 as &i8;
        if hFile == INVALID_HANDLE_VALUE {
            return 0;
        }

        let bytes_written: u32 = 0;
        let success: i32 = WriteFile(hFile, content, content_len, &bytes_written, 0 as &i8);

        CloseHandle(hFile);

        if success == 0 {
            return 0;
        }
        if bytes_written != content_len {
            return 0;
        }

        return 1;
    }
    fn read_full_file_as_string(path: &i8) : string::String {
        let GENERIC_READ: u32 = 0x80000000;
        let FILE_ATTRIBUTE_NORMAL: u32 = 0x80;
        let OPEN_EXISTING: u32 = 3; 
        let hFile: &i8 = CreateFileA(path, GENERIC_READ, 0, 0 as &i8, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0 as &i8);
        let INVALID_HANDLE_VALUE: &i8 = -1 as &i8;

        if hFile == INVALID_HANDLE_VALUE {
            process::throw(string_utils::insert("File  was not found", path, 5));
        }


        let file_size: i64 = 0;
        if GetFileSizeEx(hFile, &file_size) == 0 {
            CloseHandle(hFile);
            return string::empty();
        }

        let buffer: string::String = string::with_size(file_size as i32 + 1);
        

        let bytes_read: u32 = 0;
        let success: i32 = ReadFile(hFile, buffer.data, file_size as u32, &bytes_read, 0 as &i8);
        
        CloseHandle(hFile);

        if success == 0 || (bytes_read as i64) != file_size {
            string::free(&buffer);
            process::throw("File read failed");
        }
        buffer.len = file_size as i32;
        
        return buffer;
    }
    fn create_file(path: &i8) : i32 {
        let CREATE_NEW: u32 = 1;
        let GENERIC_WRITE: u32 = 0x40000000;
        let FILE_ATTRIBUTE_NORMAL: u32 = 0x80;
        
        let hFile: &i8 = CreateFileA(
            path,
            GENERIC_WRITE,
            0, // dwShareMode: No sharing
            0 as &i8, // lpSecurityAttributes: Default security
            CREATE_NEW,
            FILE_ATTRIBUTE_NORMAL,
            0 as &i8 // hTemplateFile: No template
        );

        let INVALID_HANDLE_VALUE: &i8 = -1 as &i8;
        if hFile == INVALID_HANDLE_VALUE {
            return 0;
        }
        CloseHandle(hFile);

        return 1;
    }
    fn delete_file(path: &i8) : i32 {
        return DeleteFileA(path);
    }
}

namespace tests{
    fn run(){
        fs_test();
    }

    fn fs_test(){
        console::write("fs_test: ", 9);
        let data : string::String = string::from_c_string("The quick brown fox jumps over crazy lost dog.");
        let env_path : string::String = process::get_executable_env_path();
        let new_file_path: string::String = string::concat_with_c_string(&env_path, "test.txt");
        
        let c_string : &i8 = stalloc(sizeof(i8) * (new_file_path.len + 1) as i64);
        mem::copy(new_file_path.data, c_string, new_file_path.len as i64);
        *(c_string + new_file_path.len as i64) = 0;

        fs::create_file(c_string);
        fs::delete_file(c_string);

        fs::create_file(c_string);
        fs::write_to_file(c_string, data.data, data.len as u32);
        
        let read: string::String = fs::read_full_file_as_string(c_string);
        if !string::equal(&data, &read){
            process::throw("Filesystem test failed, data mismatch");
        }

        fs::delete_file(c_string);
        string::free(&read);
        string::free(&new_file_path);
        string::free(&env_path);
        string::free(&data);
        console::writeln("OK", 2);
    }
}