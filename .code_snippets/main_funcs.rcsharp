fn __chkstk(){
    // That is moronic
}

#[DllImport("user32.dll")]
fn MessageBoxA(hWnd:&i8, lpText: &i8, lpCaption: &i8, uType: i32): i32;

#[DllImport("kernel32.dll")]
fn AllocConsole(): i32;

#[DllImport("kernel32.dll")]
fn FreeConsole(): i32;

#[DllImport("kernel32.dll")]
fn ExitProcess(code:i32): void;

#[DllImport("kernel32.dll")]
fn GetStdHandle(nStdHandle: i32): &i32;

#[DllImport("kernel32.dll")]
fn WriteConsoleA(
    hConsoleOutput: &i32,
    lpBuffer: &i8,
    nNumberOfCharsToWrite: i32,
    lpNumberOfCharsWritten: &i32,
    lpReserved: &i32
): i32;


#[DllImport("kernel32.dll")]
fn ReadConsoleA(
    hConsoleInput: &i32,
    lpBuffer: &i8,
    nNumberOfCharsToRead: i32,
    lpNumberOfCharsRead: &i32,
    pInputControl: &i32
): i32;

#[DllImport("kernel32.dll")]
fn GetProcessHeap(): &i32;

#[DllImport("kernel32.dll")]
fn HeapAlloc(hHeap: &i32, dwFlags: i32, dwBytes: i64): &i8;

#[DllImport("kernel32.dll")]
fn HeapFree(hHeap: &i32, dwFlags: i32, lpMem: &i8): i32;


fn get_stdout() : &i32 {
    let stdout_handle: &i32 = GetStdHandle(-11 as i32);
    if (&stdout_handle) == -1{
        ExitProcess(-1);
    }
    return stdout_handle;
}

fn get_stdin() : &i32 {
    let stdin_handle: &i32 = GetStdHandle(-10 as i32);
    if (&stdin_handle) == -1{
        ExitProcess(-1);
    }
    return stdin_handle;
}

fn malloc(size:i32) : &i8{
    let process_heap: &i32 = GetProcessHeap();
    let buffer: &i8 = HeapAlloc(process_heap, 0, size);
    return buffer;
}

fn malloc_zero(size:i32) : &i8{
    let process_heap: &i32 = GetProcessHeap();
    let buffer: &i8 = HeapAlloc(process_heap, 8, size);
    return buffer;
}

fn free(buffer: &i8) {
    let process_heap: &i32 = GetProcessHeap();
    HeapFree(process_heap, 0, buffer);
}

fn write(buffer: &i8, len: i32){
    let stdout_handle: &i32 = get_stdout();
    WriteConsoleA(stdout_handle, buffer, len, 0 as &i32, 0 as &i32);
}

fn read_key() : i8{
    let stdin_handle: &i32 = get_stdin();
    let read: i32 = 0;
    let input_buffer : i8 = 0;
    ReadConsoleA(stdin_handle, &input_buffer, 1, &read, 0);
    return input_buffer;
}

fn echo(): void {
    let BUFFER_SIZE: i32 = 1024;

    let input_buffer: &i8 = malloc(BUFFER_SIZE);

    let number_of_chars_read: i32 = 0;

    let stdin_handle: &i32 = get_stdin();

    ReadConsoleA(
        stdin_handle,          
        input_buffer,          
        BUFFER_SIZE,           
        &number_of_chars_read, 
        0                      
    );
    write(input_buffer, number_of_chars_read);
    free(input_buffer);
}

fn mem_copy(dest: &i8, src : &i8, len : i32){
    let i : i32 = 0;
    loop{
        if i >= len{
            break;
        }
        (*&dest[i]) = src[i];
        i = i + 1;
    }
}