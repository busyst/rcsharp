#[include("./src_base_structs.rcsharp")]

inline fn basic_functions(){
    console::AllocConsole();
    tests::run();
    window::start();
    console::FreeConsole();
}
namespace geg{
    struct vec<T>{
        data: &vec<string::String>,
        x: &T,
        len: i32,
        capacity: i32,
    }
}
namespace kej{
    struct vecq<T>{
        data: &kej::vecq<string::String>,
        x: &T,
        len: i32,
        capacity: i32,
    }
}
fn main(): i32 {
    let x : kej::vecq<i64>;
    let y : kej::vecq<string::String>;
    x.data = &y;
    x.data.len = 1;
    x.len = 3;
    x.capacity = 2;
    basic_functions();
    return 0;
}

namespace window{
    // Down from here, ai assisted code
    
    // https://program-day.tistory.com/22
    enum WM : u32 {
        NULL = 0x0000,
        CREATE = 0x0001,
        DESTROY = 0x0002,
        MOVE = 0x0003,
        SIZE = 0x0005,
        ACTIVATE = 0x0006,
        SETFOCUS = 0x0007,
        KILLFOCUS = 0x0008,
        ENABLE = 0x000A,
        SETREDRAW = 0x000B,
        SETTEXT = 0x000C,
        GETTEXT = 0x000D,
        GETTEXTLENGTH = 0x000E,
        PAINT = 0x000F,
        CLOSE = 0x0010,
        QUERYENDSESSION = 0x0011,
        QUERYOPEN = 0x0013,
        ENDSESSION = 0x0016,
        QUIT = 0x0012,
        ERASEBKGND = 0x0014,
        SYSCOLORCHANGE = 0x0015,
        SHOWWINDOW = 0x0018,
        WININICHANGE = 0x001A,
        SETTINGCHANGE = 0x001A,
        DEVMODECHANGE = 0x001B,
        ACTIVATEAPP = 0x001C,
        FONTCHANGE = 0x001D,
        TIMECHANGE = 0x001E,
        CANCELMODE = 0x001F,
        SETCURSOR = 0x0020,
        MOUSEACTIVATE = 0x0021,
        CHILDACTIVATE = 0x0022,
        QUEUESYNC = 0x0023,
        GETMINMAXINFO = 0x0024,
        PAINTICON = 0x0026,
        ICONERASEBKGND = 0x0027,
        NEXTDLGCTL = 0x0028,
        SPOOLERSTATUS = 0x002A,
        DRAWITEM = 0x002B,
        MEASUREITEM = 0x002C,
        DELETEITEM = 0x002D,
        VKEYTOITEM = 0x002E,
        CHARTOITEM = 0x002F,
        SETFONT = 0x0030,
        GETFONT = 0x0031,
        SETHOTKEY = 0x0032,
        GETHOTKEY = 0x0033,
        QUERYDRAGICON = 0x0037,
        COMPAREITEM = 0x0039,
        GETOBJECT = 0x003D,
        COMPACTING = 0x0041,
        COMMNOTIFY = 0x0044,
        WINDOWPOSCHANGING = 0x0046,
        WINDOWPOSCHANGED = 0x0047,
        POWER = 0x0048,
        COPYDATA = 0x004A,
        CANCELJOURNAL = 0x004B,
        NOTIFY = 0x004E,
        INPUTLANGCHANGEREQUEST = 0x0050,
        INPUTLANGCHANGE = 0x0051,
        TCARD = 0x0052,
        HELP = 0x0053,
        USERCHANGED = 0x0054,
        NOTIFYFORMAT = 0x0055,
        CONTEXTMENU = 0x007B,
        STYLECHANGING = 0x007C,
        STYLECHANGED = 0x007D,
        DISPLAYCHANGE = 0x007E,
        GETICON = 0x007F,
        SETICON = 0x0080,
        NCCREATE = 0x0081,
        NCDESTROY = 0x0082,
        NCCALCSIZE = 0x0083,
        NCHITTEST = 0x0084,
        NCPAINT = 0x0085,
        NCACTIVATE = 0x0086,
        GETDLGCODE = 0x0087,
        SYNCPAINT = 0x0088,
        NCMOUSEMOVE = 0x00A0,
        NCLBUTTONDOWN = 0x00A1,
        NCLBUTTONUP = 0x00A2,
        NCLBUTTONDBLCLK = 0x00A3,
        NCRBUTTONDOWN = 0x00A4,
        NCRBUTTONUP = 0x00A5,
        NCRBUTTONDBLCLK = 0x00A6,
        NCMBUTTONDOWN = 0x00A7,
        NCMBUTTONUP = 0x00A8,
        NCMBUTTONDBLCLK = 0x00A9,
        NCXBUTTONDOWN = 0x00AB,
        NCXBUTTONUP = 0x00AC,
        NCXBUTTONDBLCLK = 0x00AD,
        INPUT_DEVICE_CHANGE = 0x00FE,
        INPUT = 0x00FF,
        KEYFIRST = 0x0100,
        KEYDOWN = 0x0100,
        KEYUP = 0x0101,
        CHAR = 0x0102,
        DEADCHAR = 0x0103,
        SYSKEYDOWN = 0x0104,
        SYSKEYUP = 0x0105,
        SYSCHAR = 0x0106,
        SYSDEADCHAR = 0x0107,
        UNICHAR = 0x0109,
        KEYLAST = 0x0109,
        INITDIALOG = 0x0110,
        COMMAND = 0x0111,
        SYSCOMMAND = 0x0112,
        TIMER = 0x0113,
        HSCROLL = 0x0114,
        VSCROLL = 0x0115,
        INITMENU = 0x0116,
        INITMENUPOPUP = 0x0117,
        MENUSELECT = 0x011F,
        MENUCHAR = 0x0120,
        ENTERIDLE = 0x0121,
        MENURBUTTONUP = 0x0122,
        MENUDRAG = 0x0123,
        MENUGETOBJECT = 0x0124,
        UNINITMENUPOPUP = 0x0125,
        MENUCOMMAND = 0x0126,
        CHANGEUISTATE = 0x0127,
        UPDATEUISTATE = 0x0128,
        QUERYUISTATE = 0x0129,
        CTLCOLORMSGBOX = 0x0132,
        CTLCOLOREDIT = 0x0133,
        CTLCOLORLISTBOX = 0x0134,
        CTLCOLORBTN = 0x0135,
        CTLCOLORDLG = 0x0136,
        CTLCOLORSCROLLBAR = 0x0137,
        CTLCOLORSTATIC = 0x0138,
        MOUSEFIRST = 0x0200,
        MOUSEMOVE = 0x0200,
        LBUTTONDOWN = 0x0201,
        LBUTTONUP = 0x0202,
        LBUTTONDBLCLK = 0x0203,
        RBUTTONDOWN = 0x0204,
        RBUTTONUP = 0x0205,
        RBUTTONDBLCLK = 0x0206,
        MBUTTONDOWN = 0x0207,
        MBUTTONUP = 0x0208,
        MBUTTONDBLCLK = 0x0209,
        MOUSEWHEEL = 0x020A,
        XBUTTONDOWN = 0x020B,
        XBUTTONUP = 0x020C,
        XBUTTONDBLCLK = 0x020D,
        MOUSEHWHEEL = 0x020E,
        MOUSELAST = 0x020E,
        PARENTNOTIFY = 0x0210,
        ENTERMENULOOP = 0x0211,
        EXITMENULOOP = 0x0212,
        NEXTMENU = 0x0213,
        SIZING = 0x0214,
        CAPTURECHANGED = 0x0215,
        MOVING = 0x0216,
        POWERBROADCAST = 0x0218,
        DEVICECHANGE = 0x0219,
        MDICREATE = 0x0220,
        MDIDESTROY = 0x0221,
        MDIACTIVATE = 0x0222,
        MDIRESTORE = 0x0223,
        MDINEXT = 0x0224,
        MDIMAXIMIZE = 0x0225,
        MDITILE = 0x0226,
        MDICASCADE = 0x0227,
        MDIICONARRANGE = 0x0228,
        MDIGETACTIVE = 0x0229,
        MDISETMENU = 0x0230,
        ENTERSIZEMOVE = 0x0231,
        EXITSIZEMOVE = 0x0232,
        DROPFILES = 0x0233,
        MDIREFRESHMENU = 0x0234,
        DPICHANGED = 0x02E0,
        THEMECHANGED = 0x031A,
        CLIPBOARDUPDATE = 0x031D,
        USER = 0x0400,
        APP = 0x8000,
    }
    enum CS : u32 {
        VREDRAW = 0x0001,
        HREDRAW = 0x0002,
        DBLCLKS = 0x0008,
        OWNDC = 0x0020,
        CLASSDC = 0x0040,
        PARENTDC = 0x0080,
        NOCLOSE = 0x0200,
        SAVEBITS = 0x0800,
        BYTEALIGNCLIENT = 0x1000,
        BYTEALIGNWINDOW = 0x2000,
        GLOBALCLASS = 0x4000,
        IME = 0x00010000,
        DROPSHADOW = 0x00020000,
    }
    enum WS : u32 {
        // Primary window types
        OVERLAPPED = 0x00000000,
        POPUP = 0x80000000,
        CHILD = 0x40000000,

        // Control styles
        MINIMIZE = 0x20000000,
        VISIBLE = 0x10000000,
        DISABLED = 0x08000000,
        CLIPSIBLINGS = 0x04000000,
        CLIPCHILDREN = 0x02000000,
        MAXIMIZE = 0x01000000,
        
        // Border and caption styles
        CAPTION = 0x00C00000, // WS_BORDER | WS_DLGFRAME
        BORDER = 0x00800000,
        DLGFRAME = 0x00400000,
        
        // Scrollbar styles
        VSCROLL = 0x00200000,
        HSCROLL = 0x00100000,
        
        // Standard window components
        SYSMENU = 0x00080000,
        THICKFRAME = 0x00040000,
        
        // Grouping and tabbing
        GROUP = 0x00020000,
        TABSTOP = 0x00010000,

        // Box styles
        MINIMIZEBOX = 0x00020000,
        MAXIMIZEBOX = 0x00010000,

        // Aliases
        TILED = 0x00000000,
        ICONIC = 0x20000000,
        SIZEBOX = 0x00040000,

        // Common composite styles
        TILEDWINDOW = 0x00000000 | 0x00C00000 | 0x00080000 | 0x00040000 | 0x00020000 | 0x00010000,
        OVERLAPPEDWINDOW = 0x00000000 | 0x00C00000 | 0x00080000 | 0x00040000 | 0x00020000 | 0x00010000,
        POPUPWINDOW = 0x80000000 | 0x00800000 | 0x00080000,
        CHILDWINDOW = 0x40000000,
    }
    enum WS_EX : u32 {
        DLGMODALFRAME = 0x00000001,
        NOPARENTNOTIFY = 0x00000004,
        TOPMOST = 0x00000008,
        ACCEPTFILES = 0x00000010,
        TRANSPARENT = 0x00000020,
        MDICHILD = 0x00000040,
        TOOLWINDOW = 0x00000080,
        WINDOWEDGE = 0x00000100,
        CLIENTEDGE = 0x00000200,
        CONTEXTHELP = 0x00000400,
        RIGHT = 0x00001000,
        LEFT = 0x00000000,
        RTLREADING = 0x00002000,
        LTRREADING = 0x00000000,
        LEFTSCROLLBAR = 0x00004000,
        RIGHTSCROLLBAR = 0x00000000,
        CONTROLPARENT = 0x00010000,
        STATICEDGE = 0x00020000,
        APPWINDOW = 0x00040000,
        LAYERED = 0x00080000,
        NOINHERITLAYOUT = 0x00100000,
        NOREDIRECTIONBITMAP = 0x00200000,
        LAYOUTRTL = 0x00400000,
        COMPOSITED = 0x02000000,
        NOACTIVATE = 0x08000000,
        
        // Common composite styles
        OVERLAPPEDWINDOW = 0x00000100 | 0x00000200,
        PALETTEWINDOW = 0x00000100 | 0x00000080 | 0x00000008,
    }
    enum SW : i32 {
        HIDE = 0,
        SHOWNORMAL = 1,
        NORMAL = 1,
        SHOWMINIMIZED = 2,
        SHOWMAXIMIZED = 3,
        MAXIMIZE = 3,
        SHOWNOACTIVATE = 4,
        SHOW = 5,
        MINIMIZE = 6,
        SHOWMINNOACTIVE = 7,
        SHOWNA = 8,
        RESTORE = 9,
        SHOWDEFAULT = 10,
        FORCEMINIMIZE = 11,
        MAX = 11,
    }
    enum SYS_COLOR : i32 {
        SCROLLBAR = 0,
        BACKGROUND = 1,
        DESKTOP = 1,
        ACTIVECAPTION = 2,
        INACTIVECAPTION = 3,
        MENU = 4,
        WINDOW = 5,
        WINDOWFRAME = 6,
        MENUTEXT = 7,
        WINDOWTEXT = 8,
        CAPTIONTEXT = 9,
        ACTIVEBORDER = 10,
        INACTIVEBORDER = 11,
        APPWORKSPACE = 12,
        HIGHLIGHT = 13,
        HIGHLIGHTTEXT = 14,
        BTNFACE = 15,
        THREEDFACE = 15,
        BTNSHADOW = 16,
        THREEDSHADOW = 16,
        GRAYTEXT = 17,
        BTNTEXT = 18,
        INACTIVECAPTIONTEXT = 19,
        BTNHIGHLIGHT = 20,
        THREEDHIGHLIGHT = 20,
        BTNHILIGHT = 20,
        THREEDHILIGHT = 20,
        THREEDDKSHADOW = 21,
        THREEDLIGHT = 22,
        INFOTEXT = 23,
        INFOBK = 24,
        HOTLIGHT = 26,
        GRADIENTACTIVECAPTION = 27,
        GRADIENTINACTIVECAPTION = 28,
        MENUHILIGHT = 29,
        MENUBAR = 30,
    }

    struct WNDCLASSEXA {
        cbSize: u32,                            // UINT
        style: u32,                             // UINT
        //lpfnWndProc: &fn(hWnd: &i8, uMsg: u32, wParam: u64, lParam: u64): i64, // WNDPROC (function pointer)
        lpfnWndProc: &fn(&i8, u32, u64, u64): i64, // WNDPROC (function pointer)
        cbClsExtra: i32,                        // INT
        cbWndExtra: i32,                        // INT
        hInstance: &i8,                         // HINSTANCE
        hIcon: &i8,                             // HICON
        hCursor: &i8,                           // HCURSOR
        hbrBackground: &i8,                     // HBRUSH
        lpszMenuName: &i8,                      // LPCSTR
        lpszClassName: &i8,                     // LPCSTR
        hIconSm: &i8,                           // HICON
    }
    #[DllImport("user32.dll")]
    fn RegisterClassExA(lpwcx: &WNDCLASSEXA): u16; // ATOM is WORD, so u16
    #[DllImport("user32.dll")]
    fn CreateWindowExA(
        dwExStyle: u32,
        lpClassName: &i8,
        lpWindowName: &i8,
        dwStyle: u32,
        x: i32,
        y: i32,
        nWidth: i32,
        nHeight: i32,
        hWndParent: &i8,
        hMenu: &i8,
        hInstance: &i8,
        lpParam: &i8
    ): &i8; // HWND is a HANDLE, so &i8

    #[DllImport("user32.dll")]
    fn ShowWindow(hWnd: &i8, nCmdShow: i32): i32; // BOOL is int, so i32
    #[DllImport("user32.dll")]
    fn UpdateWindow(hWnd: &i8): i32; // BOOL is int, so i32
    #[DllImport("user32.dll")]
    fn GetMessageA(lpMsg: &MSG, hWnd: &i8, wMsgFilterMin: u32, wMsgFilterMax: u32): i32; // BOOL is int, so i32
    #[DllImport("user32.dll")]
    fn PeekMessageA(lpMsg: &MSG, hWnd: &i8, wMsgFilterMin: u32, wMsgFilterMax: u32, wRemoveMsg: u32): i32; // BOOL is int, so i32
    
    #[DllImport("user32.dll")]
    fn TranslateMessage(lpMsg: &MSG): i32; // BOOL is int, so i32
    #[DllImport("user32.dll")]
    fn DispatchMessageA(lpMsg: &MSG): i64; // LRESULT is LONG_PTR, so i64
    #[DllImport("user32.dll")]
    fn DefWindowProcA(hWnd: &i8, uMsg: u32, wParam: u64, lParam: u64): i64; // LRESULT is LONG_PTR, so i64
    #[DllImport("user32.dll")]
    fn PostQuitMessage(nExitCode: i32): void;
    #[DllImport("kernel32.dll")]
    fn GetModuleHandleA(lpModuleName: &i8): &void; // HINSTANCE is just a HANDLE, so &i8
    struct POINT {
        x: i32,
        y: i32,
    }
    struct MSG {
        hWnd: &i8,      // HWND
        message: u32,   // UINT
        wParam: u64,    // WPARAM
        lParam: u64,    // LPARAM
        time: u32,      // DWORD
        pt: POINT,      // POINT
        // There are actually two more internal fields, but often ignored for basic use
    }

    fn WindowProc(hWnd: &i8, uMsg: u32, wParam: u64, lParam: u64): i64 {
        if uMsg == WM::CLOSE {
            PostQuitMessage(0);
            return 0;
        }
        if uMsg == WM::DESTROY {
            PostQuitMessage(0);
            return 0;
        }
        if uMsg == WM::KEYDOWN {
            if wParam == 27 { // ESC
                PostQuitMessage(0);
                return 0;
            }
            console::print_char(wParam as i8);
        }
        return DefWindowProcA(hWnd, uMsg, wParam, lParam);
    }
    enum StartError: i32 { Ok = 0, GetModuleHandleFailed = 1, RegisterClassFailed = 2, CreateWindowFailed = 3 }
    
    inline fn is_null(p: &i8): bool { return p == 0 as &i8; }

    fn start(){
        // CW apparently stands for Control Word. https://stackoverflow.com/questions/48079439/winapi-cw-usedefault-vs-cw-default
        let CW_USEDEFAULT: i32 = 0x80000000;

        let hInstance: &i8 = GetModuleHandleA(0 as &i8) as &i8;
        if is_null(hInstance) { process::throw("Window error: StartError::GetModuleHandleFailed"); }

        let className: &i8 = "MyWindowClass";
        let wc: WNDCLASSEXA;
        wc.cbSize = sizeof(WNDCLASSEXA);
        wc.style = CS::HREDRAW | CS::VREDRAW;
        wc.lpfnWndProc = &WindowProc;
        wc.cbClsExtra = 0;
        wc.cbWndExtra = 0;
        wc.hInstance = hInstance;
        wc.hIcon = 0 as &i8;
        wc.hCursor = 0 as &i8;
        wc.hbrBackground = (SYS_COLOR::WINDOW + 1) as &i8;
        wc.lpszMenuName = 0 as &i8;
        wc.lpszClassName = className;
        wc.hIconSm = 0 as &i8;

        if RegisterClassExA(&wc) == 0 { process::throw("Window error: StartError::RegisterClassFailed"); }

        let windowTitle: &i8 = "Hello, World!";
        let hWnd: &i8 = CreateWindowExA(
            0,                      // Extended window style
            className,              // Window class name
            windowTitle,            // Window title
            WS::TILEDWINDOW,        // Window style
            CW_USEDEFAULT,          // X position
            CW_USEDEFAULT,          // Y position
            800,                    // Width
            600,                    // Height
            0 as &i8,               // Parent window
            0 as &i8,               // Menu
            hInstance,              // Application instance handle
            0 as &i8                // Additional application data
        );

        if is_null(hWnd) { process::throw("Window error: StartError::CreateWindowFailed"); }

        ShowWindow(hWnd, SW::SHOWNORMAL);
        UpdateWindow(hWnd);

        let msg: MSG;
        loop {
            if PeekMessageA(&msg, 0 as &i8, 0, 0, 1) != 0{
                if msg.message == WM::QUIT{
                    break;
                }
                TranslateMessage(&msg);
                DispatchMessageA(&msg);
            }
        }
        
    }

}